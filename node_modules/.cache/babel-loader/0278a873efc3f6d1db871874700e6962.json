{"ast":null,"code":"var _jsxFileName = \"/Users/gopalkbks/Desktop/work/programming/udemy/Academind/mern/frontend/src/shared/components/FormElements/Input.js\",\n    _s = $RefreshSig$();\n\n// import React, { useReducer, useEffect } from 'react';\n// import './Input.css';\n// import { validate } from '../util/validators';\n// const initialState = { value: '', isValid: false, isTouched: false };\n// const inputReducer = (state, action) => {\n// \tswitch (action.type) {\n// \t\tcase 'CHANGE':\n// \t\t\treturn {\n// \t\t\t\t...state,\n// \t\t\t\tvalue: action.val,\n// \t\t\t\tisValid: validate(action.val, action.validators),\n// \t\t\t};\n// \t\tcase 'TOUCH': {\n// \t\t\treturn {\n// \t\t\t\t...state,\n// \t\t\t\tisTouched: true,\n// \t\t\t};\n// \t\t}\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n// const Input = (props) => {\n// \tconst [inputState, dispatch] = useReducer(inputReducer, initialState);\n// \tconst { id, onInput } = props;\n// \tconst { value, isValid } = inputState;\n// \tuseEffect(() => {\n// \t\tprops.onInput(props.id, inputState.value, inputState.isValid);\n// \t}, [props, inputState]);\n// \tconst changeHandler = (event) => {\n// \t\tdispatch({\n// \t\t\ttype: 'CHANGE',\n// \t\t\tval: event.target.value,\n// \t\t\tvalidators: props.validators,\n// \t\t});\n// \t};\n// \tconst touchHandler = () => {\n// \t\tdispatch({\n// \t\t\ttype: 'TOUCH',\n// \t\t});\n// \t};\n// \tconst element =\n// \t\tprops.element === 'input' ? (\n// \t\t\t<input\n// \t\t\t\tid={props.id}\n// \t\t\t\ttype={props.type}\n// \t\t\t\tplaceholder={props.placeholder}\n// \t\t\t\tonChange={changeHandler}\n// \t\t\t\tonBlur={touchHandler}\n// \t\t\t\tvalue={inputState.value}\n// \t\t\t/>\n// \t\t) : (\n// \t\t\t<textarea\n// \t\t\t\tid={props.id}\n// \t\t\t\trows={props.rows || 3}\n// \t\t\t\tonChange={changeHandler}\n// \t\t\t\tonBlur={touchHandler}\n// \t\t\t\tvalue={inputState.value}\n// \t\t\t/>\n// \t\t);\n// \treturn (\n// \t\t<div\n// \t\t\tclassName={`form-control ${\n// //\t\t\t\t!inputState.isValid && inputState.isTouched && 'form-control--invalid'\n// \t\t\t}`}\n// \t\t>\n// \t\t\t<label htmlFor={props.id}>{props.label}</label>\n// \t\t\t{element}\n// \t\t\t{!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n// \t\t</div>\n// \t);\n// };\n// export default Input;\nimport React, { useReducer } from 'react';\nimport './Input.css';\nimport { validate } from '../util/validators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  value: '',\n  isValid: false\n};\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        value: action.val,\n        isValid: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputReducer, initialState);\n\n  const changeHandler = () => {\n    dispatch({});\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    value: inputState.value,\n    onChange: changeHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 4\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${!inputState.isValid && 'form-control--invalid'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 4\n    }, this), element, !inputState.isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Input, \"WTVy3W/BBpinEIavl2C9EMTzZQQ=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/gopalkbks/Desktop/work/programming/udemy/Academind/mern/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","initialState","value","isValid","inputReducer","state","action","type","val","Input","props","inputState","dispatch","changeHandler","element","id","placeholder","rows","label","errorText"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,OAAO,EAAE;AAAtB,CAArB;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,QAAL;AACC,aAAO;AACNL,QAAAA,KAAK,EAAEI,MAAM,CAACE,GADR;AAENL,QAAAA,OAAO,EAAE;AAFH,OAAP;;AAID;AACC,aAAOE,KAAP;AAPF;AASA,CAVD;;AAWA,MAAMI,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBb,UAAU,CAACK,YAAD,EAAeH,YAAf,CAAzC;;AAEA,QAAMY,aAAa,GAAG,MAAM;AAC3BD,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,GAFD;;AAIA,QAAME,OAAO,GACZJ,KAAK,CAACI,OAAN,KAAkB,OAAlB,gBACC;AACC,IAAA,EAAE,EAAEJ,KAAK,CAACK,EADX;AAEC,IAAA,IAAI,EAAEL,KAAK,CAACH,IAFb;AAGC,IAAA,WAAW,EAAEG,KAAK,CAACM,WAHpB;AAIC,IAAA,QAAQ,EAAEH,aAJX;AAKC,IAAA,KAAK,EAAEF,UAAU,CAACT;AALnB;AAAA;AAAA;AAAA;AAAA,UADD,gBASC;AACC,IAAA,EAAE,EAAEQ,KAAK,CAACK,EADX;AAEC,IAAA,IAAI,EAAEL,KAAK,CAACO,IAAN,IAAc,CAFrB;AAGC,IAAA,KAAK,EAAEN,UAAU,CAACT,KAHnB;AAIC,IAAA,QAAQ,EAAEW,aAJX;AAKC,IAAA,KAAK,EAAEF,UAAU,CAACT;AALnB;AAAA;AAAA;AAAA;AAAA,UAVF;AAkBA,sBACC;AACC,IAAA,SAAS,EAAG,gBACX,CAACS,UAAU,CAACR,OAAZ,IAAuB,uBACvB,EAHF;AAAA,4BAKC;AAAO,MAAA,OAAO,EAAEO,KAAK,CAACK,EAAtB;AAAA,gBAA2BL,KAAK,CAACQ;AAAjC;AAAA;AAAA;AAAA;AAAA,YALD,EAMEJ,OANF,EAOE,CAACH,UAAU,CAACR,OAAZ,iBAAuB;AAAA,gBAAIO,KAAK,CAACS;AAAV;AAAA;AAAA;AAAA;AAAA,YAPzB;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CApCD;;GAAMV,K;;KAAAA,K;AAsCN,eAAeA,KAAf","sourcesContent":["// import React, { useReducer, useEffect } from 'react';\n// import './Input.css';\n// import { validate } from '../util/validators';\n// const initialState = { value: '', isValid: false, isTouched: false };\n// const inputReducer = (state, action) => {\n// \tswitch (action.type) {\n// \t\tcase 'CHANGE':\n// \t\t\treturn {\n// \t\t\t\t...state,\n// \t\t\t\tvalue: action.val,\n// \t\t\t\tisValid: validate(action.val, action.validators),\n// \t\t\t};\n// \t\tcase 'TOUCH': {\n// \t\t\treturn {\n// \t\t\t\t...state,\n// \t\t\t\tisTouched: true,\n// \t\t\t};\n// \t\t}\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n// const Input = (props) => {\n// \tconst [inputState, dispatch] = useReducer(inputReducer, initialState);\n\n// \tconst { id, onInput } = props;\n// \tconst { value, isValid } = inputState;\n\n// \tuseEffect(() => {\n// \t\tprops.onInput(props.id, inputState.value, inputState.isValid);\n// \t}, [props, inputState]);\n\n// \tconst changeHandler = (event) => {\n// \t\tdispatch({\n// \t\t\ttype: 'CHANGE',\n// \t\t\tval: event.target.value,\n// \t\t\tvalidators: props.validators,\n// \t\t});\n// \t};\n\n// \tconst touchHandler = () => {\n// \t\tdispatch({\n// \t\t\ttype: 'TOUCH',\n// \t\t});\n// \t};\n\n// \tconst element =\n// \t\tprops.element === 'input' ? (\n// \t\t\t<input\n// \t\t\t\tid={props.id}\n// \t\t\t\ttype={props.type}\n// \t\t\t\tplaceholder={props.placeholder}\n// \t\t\t\tonChange={changeHandler}\n// \t\t\t\tonBlur={touchHandler}\n// \t\t\t\tvalue={inputState.value}\n// \t\t\t/>\n// \t\t) : (\n// \t\t\t<textarea\n// \t\t\t\tid={props.id}\n// \t\t\t\trows={props.rows || 3}\n// \t\t\t\tonChange={changeHandler}\n// \t\t\t\tonBlur={touchHandler}\n// \t\t\t\tvalue={inputState.value}\n// \t\t\t/>\n// \t\t);\n\n// \treturn (\n// \t\t<div\n// \t\t\tclassName={`form-control ${\n// //\t\t\t\t!inputState.isValid && inputState.isTouched && 'form-control--invalid'\n// \t\t\t}`}\n// \t\t>\n// \t\t\t<label htmlFor={props.id}>{props.label}</label>\n// \t\t\t{element}\n// \t\t\t{!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n// \t\t</div>\n// \t);\n// };\n\n// export default Input;\nimport React, { useReducer } from 'react';\nimport './Input.css';\nimport { validate } from '../util/validators';\nconst initialState = { value: '', isValid: false };\nconst inputReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'CHANGE':\n\t\t\treturn {\n\t\t\t\tvalue: action.val,\n\t\t\t\tisValid: true,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nconst Input = (props) => {\n\tconst [inputState, dispatch] = useReducer(inputReducer, initialState);\n\n\tconst changeHandler = () => {\n\t\tdispatch({});\n\t};\n\n\tconst element =\n\t\tprops.element === 'input' ? (\n\t\t\t<input\n\t\t\t\tid={props.id}\n\t\t\t\ttype={props.type}\n\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tvalue={inputState.value}\n\t\t\t/>\n\t\t) : (\n\t\t\t<textarea\n\t\t\t\tid={props.id}\n\t\t\t\trows={props.rows || 3}\n\t\t\t\tvalue={inputState.value}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tvalue={inputState.value}\n\t\t\t/>\n\t\t);\n\treturn (\n\t\t<div\n\t\t\tclassName={`form-control ${\n\t\t\t\t!inputState.isValid && 'form-control--invalid'\n\t\t\t}`}\n\t\t>\n\t\t\t<label htmlFor={props.id}>{props.label}</label>\n\t\t\t{element}\n\t\t\t{!inputState.isValid && <p>{props.errorText}</p>}\n\t\t</div>\n\t);\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}